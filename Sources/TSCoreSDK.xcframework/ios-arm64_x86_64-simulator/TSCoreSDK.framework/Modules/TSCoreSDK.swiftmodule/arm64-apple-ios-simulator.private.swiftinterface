// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TSCoreSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreData
import CryptoKit
import Foundation
import LocalAuthentication
import Network
import Security
import Swift
import SystemConfiguration
@_exported import TSCoreSDK
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import os
@_hasMissingDesignatedInitializers public class TSUserDefauls {
  public static let shared: TSCoreSDK.TSUserDefauls
  public func set(moduleInfo: any TSCoreSDK.ITSModuleInfo, value: Any?, forKey key: Swift.String) throws
  public func getInt(moduleInfo: any TSCoreSDK.ITSModuleInfo, key: Swift.String, defaultValue: Swift.Int?) -> Swift.Int?
  public func getFloat(moduleInfo: any TSCoreSDK.ITSModuleInfo, key: Swift.String, defaultValue: Swift.Float?) -> Swift.Float?
  public func getDouble(moduleInfo: any TSCoreSDK.ITSModuleInfo, key: Swift.String, defaultValue: Swift.Double?) -> Swift.Double?
  public func getString(moduleInfo: any TSCoreSDK.ITSModuleInfo, key: Swift.String, defaultValue: Swift.String?) -> Swift.String?
  public func getStringArray(moduleInfo: any TSCoreSDK.ITSModuleInfo, key: Swift.String, defaultValue: [Swift.String]?) -> [Swift.String]?
  public func getData(moduleInfo: any TSCoreSDK.ITSModuleInfo, key: Swift.String, defaultValue: Foundation.Data?) -> Foundation.Data?
  public func getObject(moduleInfo: any TSCoreSDK.ITSModuleInfo, key: Swift.String, defaultValue: Any?) -> Any?
  public func clearKey(moduleInfo: any TSCoreSDK.ITSModuleInfo, key: Swift.String)
  public func clearUserDetails(moduleInfo: any TSCoreSDK.ITSModuleInfo)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TSCore : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public protocol ITSModuleInfo {
  func subSystemName() -> Swift.String
  func isLoggerEnabled() -> Swift.Bool
  func endpointIgnoreList() -> [Swift.String]?
  func tenantID() -> Swift.String
  func version() -> Swift.String
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TSECService : TSCoreSDK.TSCrypto {
  public var kECKeySize: Swift.Int
  public var kECASignAlgorithm: Security.SecKeyAlgorithm
  public var kECAEncryptAlgorithm: Security.SecKeyAlgorithm
  public static let shared: TSCoreSDK.TSECService
  public func createSecureKeyPair(kSecApplicationTag: Swift.String, requiresBiometry: Swift.Bool = false, completion: ((_ success: Swift.Bool, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)? = nil)
  public func getPublicKeyData(kSecApplicationTag: Swift.String) -> Foundation.Data?
  public func getPublicKeyReference(kSecApplicationTag: Swift.String) -> Security.SecKey?
  public func getPrivateKeyReference(kSecApplicationTag: Swift.String) -> Security.SecKey?
  public func isKeyExists(kSecApplicationTag: Swift.String) -> Swift.Bool
  public func getPrivateSecKey(kSecApplicationTag: Swift.String, completion: ((_ secKey: Security.SecKey?, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)? = nil)
  public func publicKeyAsPEMFormat(kSecApplicationTag: Swift.String) -> Swift.String?
  override public func encryptMessageWithPublicKey(kSecApplicationTag: Swift.String, message: Swift.String, completion: @escaping (_ success: Swift.Bool, _ data: Foundation.Data?, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)
  override public func decryptMessageWithPrivateKey(kSecApplicationTag: Swift.String, encryptedData: Foundation.Data, completion: @escaping (_ success: Swift.Bool, _ result: Swift.String?, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)
  override public func signMessageWithPrivateKey(kSecApplicationTag: Swift.String, message: Swift.String, completion: @escaping (_ success: Swift.Bool, _ data: Foundation.Data?, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)
  public func signMessageWithPrivateKey(kSecApplicationTag: Swift.String, data: Foundation.Data, completion: @escaping (_ success: Swift.Bool, _ data: Foundation.Data?, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)
  override public func verifySignaturePublicKey(kSecApplicationTag: Swift.String, data: Foundation.Data, signatureData: Foundation.Data, completion: @escaping (Swift.Bool, TSCoreSDK.TSCryptoException?) -> Swift.Void)
  @objc deinit
}
extension Swift.String {
  public func base64urlToBase64() -> Swift.String
  public func base64ToBase64url() -> Swift.String
}
@_hasMissingDesignatedInitializers public class TSKeychain {
  public static let shared: TSCoreSDK.TSKeychain
  @discardableResult
  public func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: TSCoreSDK.KeychainSwiftAccessOptions? = .accessibleWhenUnlockedThisDeviceOnly) -> Swift.Bool
  @discardableResult
  public func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: TSCoreSDK.KeychainSwiftAccessOptions? = .accessibleWhenUnlockedThisDeviceOnly) -> Swift.Bool
  @discardableResult
  public func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: TSCoreSDK.KeychainSwiftAccessOptions? = .accessibleWhenUnlockedThisDeviceOnly) -> Swift.Bool
  public func get(_ key: Swift.String) -> Swift.String?
  public func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  public func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  public func delete(_ key: Swift.String) -> Swift.Bool
  @discardableResult
  public func clear() -> Swift.Bool
  @objc deinit
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: TSCoreSDK.KeychainSwiftAccessOptions, b: TSCoreSDK.KeychainSwiftAccessOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Encodable {
  public var ts_dictionary: [Swift.String : Any]? {
    get
  }
}
public enum TSRequestErrorCode : Swift.Error, Swift.Equatable {
  case noInternet
  case invalidResponse
  case decodingError
  case encodingError
  case encriptionError
  case invalidURL
  case noResponse
  case unauthorized
  case unexpectedStatusCode
  case unknown
  case forbiddenUrl
  case requestError(errorCode: Swift.Int)
  public static func == (a: TSCoreSDK.TSRequestErrorCode, b: TSCoreSDK.TSRequestErrorCode) -> Swift.Bool
}
public class TSRequestError : Swift.Error {
  final public let errorCode: TSCoreSDK.TSRequestErrorCode
  public init(errorCode: TSCoreSDK.TSRequestErrorCode, errorMessage: Swift.String? = nil)
  @objc deinit
}
public struct TSConstants {
}
extension TSCoreSDK.TSConstants {
  public struct Keys {
    public static let terminateByUser: Swift.String
    public static let clientId: Swift.String
    public static let moduleName: Swift.String
    public static let initializationParamsQuery: Swift.String
    public static let TSCORE_REQUEST_DURATION_HEADER: Swift.String
    public static let X_TS_PROCESSING_TIME_MS: Swift.String
  }
}
public enum TSCryptoException : Swift.Error {
  case unknownError
  case duplicateFoundWhileTryingToCreateKey
  case keyNotFound
  case authFailed
  case unableToAddPublicKeyToKeyChain
  case wrongInputDataFormat
  case unableToEncrypt
  case unableToDecrypt
  case unableToSignData
  case unableToVerifySignedData
  case unableToPerformHashOfData
  case unableToGenerateAccessControlWithGivenSecurity
  case outOfMemory
  case unableToEncryptAlgorithmNotSupported
  case unableToDecryptAlgorithmNotSupported
  case unableToSignDataAlgorithmNotSupported
  case unableToVerifySignedDataAlgorithmNotSupported
  case userCanceled
  case platformError
  case biometryAccessDenied
  case custom(error: (any Swift.Error)?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TSCrypto : ObjectiveC.NSObject {
  public func createSecureKeyPair(kSecApplicationTag: Swift.String, requiresBiometry: Swift.Bool = false, kKeyType: CoreFoundation.CFString, completion: ((Swift.Bool, TSCoreSDK.TSCryptoException?) -> Swift.Void)?)
  public func publicKeyAsPEMFormat(kSecApplicationTag: Swift.String, kKeyType: CoreFoundation.CFString) -> Swift.String?
  public func deleteSecureKeyPair(kApplicationTag: Swift.String, kKeyType: CoreFoundation.CFString, _ completion: ((_ success: Swift.Bool) -> Swift.Void)?)
  public func isKeyExists(kSecApplicationTag: Swift.String, kKeyType: CoreFoundation.CFString) -> Swift.Bool
  public func getPublicKeyData(kSecApplicationTag: Swift.String, kKeyType: CoreFoundation.CFString) -> Foundation.Data?
  public func getPublicKeyReference(kSecApplicationTag: Swift.String, kKeyType: CoreFoundation.CFString) -> Security.SecKey?
  public func getPrivateKeyReference(kSecApplicationTag: Swift.String, kKeyType: CoreFoundation.CFString) -> Security.SecKey?
  public func getPrivateSecKey(kSecApplicationTag: Swift.String, kKeyType: CoreFoundation.CFString, completion: ((_ secKey: Security.SecKey?, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)? = nil)
  public func encryptMessageWithPublicKey(kSecApplicationTag: Swift.String, message: Swift.String, completion: @escaping (Swift.Bool, Foundation.Data?, TSCoreSDK.TSCryptoException?) -> Swift.Void)
  public func decryptMessageWithPrivateKey(kSecApplicationTag: Swift.String, encryptedData: Foundation.Data, completion: @escaping (Swift.Bool, Swift.String?, TSCoreSDK.TSCryptoException?) -> Swift.Void)
  public func signMessageWithPrivateKey(kSecApplicationTag: Swift.String, message: Swift.String, completion: @escaping (Swift.Bool, Foundation.Data?, TSCoreSDK.TSCryptoException?) -> Swift.Void)
  public func verifySignaturePublicKey(kSecApplicationTag: Swift.String, data: Foundation.Data, signatureData: Foundation.Data, completion: @escaping (Swift.Bool, TSCoreSDK.TSCryptoException?) -> Swift.Void)
  @objc deinit
}
extension TSCoreSDK.TSCore {
  public static let clientPlatform: Swift.String
}
@objc @_inheritsConvenienceInitializers public class TSSecurityUtils : ObjectiveC.NSObject {
  public static func randomBase64EncodedString(length: Swift.Int) -> Swift.String?
  public static func challengeCode(verifier: Swift.String?) -> Swift.String?
  public static func randomNumber(digits: Swift.Int) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TSReachability {
  public class var isNetworkAvailable: Swift.Bool {
    get
  }
  @objc deinit
}
extension TSCoreSDK.Log {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TSCoreSDK.Log>
  @objc @NSManaged dynamic public var cn: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mn: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pn: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var s: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ssn: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var t: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date {
    @objc get
    @objc set
  }
}
public protocol TSResponse : Swift.Decodable, Swift.Encodable {
  var responseHeaders: [Swift.String : Swift.String]? { get set }
}
@_hasMissingDesignatedInitializers public class TSNetworkManager {
  @objc deinit
}
extension Swift.Dictionary {
  public func ts_dictionaryAsJsonString() -> Swift.String?
  public func ts_toData() -> Foundation.Data?
}
public struct NoReply : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class TSNetworkService<Request, Response> where Request : TSCoreSDK.TSBaseNetworkRequest, Response : Swift.Decodable, Response : Swift.Encodable {
  public init(request: Request)
  public func send(moduleInfo: any TSCoreSDK.ITSModuleInfo, completion: @escaping (Swift.Result<Response, TSCoreSDK.TSRequestError>) -> Swift.Void)
  @objc deinit
}
public enum TSLogLevel : Swift.Int, Swift.CaseIterable {
  case debug
  case verbose
  case info
  case warning
  case error
  case noLogs
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [TSCoreSDK.TSLogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [TSCoreSDK.TSLogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension TSCoreSDK.TSLogLevel {
  public var symbol: Swift.String {
    get
  }
  public var osLogType: os.OSLogType {
    get
  }
}
public struct AES256 {
  public init(key: Foundation.Data, iv: Foundation.Data) throws
  public func encrypt(_ digest: Foundation.Data) throws -> Foundation.Data
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TSRSAService : TSCoreSDK.TSCrypto {
  public var kRSAKeySize: Swift.Int
  public var kRSASignAlgorithm: Security.SecKeyAlgorithm
  public var kRSAEncryptAlgorithm: Security.SecKeyAlgorithm
  public static let shared: TSCoreSDK.TSRSAService
  public func createSecureKeyPair(kSecApplicationTag: Swift.String, requiresBiometry: Swift.Bool = false, completion: ((_ success: Swift.Bool, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)? = nil)
  public func getPublicKeyData(kSecApplicationTag: Swift.String) -> Foundation.Data?
  public func getPublicKeyReference(kSecApplicationTag: Swift.String) -> Security.SecKey?
  public func getPrivateKeyReference(kSecApplicationTag: Swift.String) -> Security.SecKey?
  public func isKeyExists(kSecApplicationTag: Swift.String) -> Swift.Bool
  public func getPrivateSecKey(kSecApplicationTag: Swift.String, completion: ((_ secKey: Security.SecKey?, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)? = nil)
  override public func encryptMessageWithPublicKey(kSecApplicationTag: Swift.String, message: Swift.String, completion: @escaping (_ success: Swift.Bool, _ data: Foundation.Data?, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)
  override public func decryptMessageWithPrivateKey(kSecApplicationTag: Swift.String, encryptedData: Foundation.Data, completion: @escaping (_ success: Swift.Bool, _ result: Swift.String?, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)
  override public func signMessageWithPrivateKey(kSecApplicationTag: Swift.String, message: Swift.String, completion: @escaping (_ success: Swift.Bool, _ data: Foundation.Data?, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)
  override public func verifySignaturePublicKey(kSecApplicationTag: Swift.String, data: Foundation.Data, signatureData: Foundation.Data, completion: @escaping (_ success: Swift.Bool, _ error: TSCoreSDK.TSCryptoException?) -> Swift.Void)
  public func publicKeyAsPEMFormatWithPrefixAndSuffix(kSecApplicationTag: Swift.String) -> Swift.String?
  public func publicKeyFromX5c(certificateBase64: Swift.String) -> Security.SecKey?
  @objc deinit
}
public protocol TSDataSource {
  associatedtype DataSourceType
  func addData(data: Self.DataSourceType, moduleInfo: any TSCoreSDK.ITSModuleInfo)
  func addData(dataList: Swift.Array<Self.DataSourceType>, moduleInfo: any TSCoreSDK.ITSModuleInfo)
  func fetchAndRemove(moduleInfo: any TSCoreSDK.ITSModuleInfo) -> [Self.DataSourceType]?
  func size(moduleInfo: any TSCoreSDK.ITSModuleInfo) -> Swift.Int
  func isEmpty(moduleInfo: any TSCoreSDK.ITSModuleInfo) -> Swift.Bool
  func removeData(moduleInfo: (any TSCoreSDK.ITSModuleInfo)?)
}
public struct EnctyptedContainer {
  public let keyAsBase64: Swift.String?
  public let ivAsBase64: Swift.String?
  public let combinedSealedBox: Swift.String
}
public class TSAESDataEncrypter {
  public init(key: CryptoKit.SymmetricKey? = nil)
  @objc deinit
}
extension TSCoreSDK.TSAESDataEncrypter {
  public func encrypt(_ data: Foundation.Data) throws -> Foundation.Data?
  public func decrypt(_ data: Foundation.Data) throws -> Foundation.Data?
  public func encryptedContainer(_ data: Foundation.Data) throws -> TSCoreSDK.EnctyptedContainer?
}
@objc @_inheritsConvenienceInitializers public class Log : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public class TSDataSyncServerController<DataSource, DataSyncServer, TRIGGER_ACTION_EVENT> where DataSource : TSCoreSDK.TSDataSource, DataSyncServer : TSCoreSDK.TSDataSyncServer, TRIGGER_ACTION_EVENT == DataSyncServer.Response, DataSource.DataSourceType == DataSyncServer.TYPE {
  public struct Configuration {
    public init(dataSource: DataSource, serverProvider: DataSyncServer, dataBufferSize: Swift.Int, dataSyncInterval: Swift.Double)
  }
  public typealias TYPE = DataSource.DataSourceType
  public init(configuration: TSCoreSDK.TSDataSyncServerController<DataSource, DataSyncServer, TRIGGER_ACTION_EVENT>.Configuration)
  @objc deinit
  public func changeParameters(bufferSize: Swift.Int, syncInterval: Swift.Double, moduleInfo: any TSCoreSDK.ITSModuleInfo)
  public func addData(data: TSCoreSDK.TSDataSyncServerController<DataSource, DataSyncServer, TRIGGER_ACTION_EVENT>.TYPE, moduleInfo: any TSCoreSDK.ITSModuleInfo)
  public func addData(dataList: [TSCoreSDK.TSDataSyncServerController<DataSource, DataSyncServer, TRIGGER_ACTION_EVENT>.TYPE], moduleInfo: any TSCoreSDK.ITSModuleInfo)
  public func triggerData(data: [TSCoreSDK.TSDataSyncServerController<DataSource, DataSyncServer, TRIGGER_ACTION_EVENT>.TYPE]? = nil, moduleInfo: any TSCoreSDK.ITSModuleInfo, completion: @escaping ((Swift.Result<TRIGGER_ACTION_EVENT, TSCoreSDK.TSRequestErrorCode>) -> Swift.Void))
}
@_hasMissingDesignatedInitializers final public class TSLog {
  public static func v(_ info: any TSCoreSDK.ITSModuleInfo, message: Swift.String, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  public static func d(_ info: any TSCoreSDK.ITSModuleInfo, message: Swift.String, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  public static func i(_ info: any TSCoreSDK.ITSModuleInfo, message: Swift.String, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  public static func w(_ info: any TSCoreSDK.ITSModuleInfo, message: Swift.String, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  public static func e(_ info: any TSCoreSDK.ITSModuleInfo, message: Swift.String, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  public static func exception(_ info: any TSCoreSDK.ITSModuleInfo, message: Swift.String, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  public static func logToConsole(level: TSCoreSDK.TSLogLevel, info: (any TSCoreSDK.ITSModuleInfo)? = nil, message: Swift.String, filename: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TSRSAConverter {
  public static func createKey(mod_b64: Swift.String, exp_b64: Swift.String) -> Security.SecKey?
  public static func createKey(pem: Swift.String) -> Security.SecKey?
  @objc deinit
}
public class TS_AES {
  public var key: CryptoKit.SymmetricKey!
  public var nonce: CryptoKit.AES.GCM.Nonce!
  public init()
  public func encrypt(data: Foundation.Data) -> CryptoKit.AES.GCM.SealedBox?
  public func decrypt(sealedBox: CryptoKit.AES.GCM.SealedBox) -> Swift.String
  public func fullCiphertext(sealedBox: CryptoKit.AES.GCM.SealedBox) -> Swift.String
  public func keyAsBase64() -> Swift.String?
  public func ivAsBase64() -> Swift.String?
  @objc deinit
}
extension CryptoKit.SymmetricKey {
  public init?(base64EncodedString: Swift.String)
  public func serialize() -> Swift.String
  public func keyAsData() -> Foundation.Data
}
public enum TSStorageErrorCode : Swift.Error {
  case dataNotFoundError
  case internalError
  public static func == (a: TSCoreSDK.TSStorageErrorCode, b: TSCoreSDK.TSStorageErrorCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class TSStorageError : Swift.Error {
  public init(errorCode: TSCoreSDK.TSStorageErrorCode, errorMessage: Swift.String? = nil)
  @objc deinit
}
extension TSCoreSDK.TSEncryptServerRequestDataProvider {
  public enum Error : Swift.Error {
    case publicKeyCreationFailed
    case rsaEncryptionFailed((any Swift.Error)?)
  }
  public struct DataContainer {
    public let keyAsBase64: Swift.String
    public let dataAsBase64: Swift.String
  }
  public struct EncryptionPublicKey {
    public init(modulus: Swift.String?, exponents: Swift.String?)
  }
}
public protocol TSEncryptEventsProviderProtocol {
  func encrypt(events: Foundation.Data, publicKey: TSCoreSDK.TSEncryptServerRequestDataProvider.EncryptionPublicKey) throws -> TSCoreSDK.TSEncryptServerRequestDataProvider.DataContainer
}
public class TSEncryptServerRequestDataProvider {
  public init()
  @objc deinit
}
extension TSCoreSDK.TSEncryptServerRequestDataProvider : TSCoreSDK.TSEncryptEventsProviderProtocol {
  public func encrypt(events: Foundation.Data, publicKey: TSCoreSDK.TSEncryptServerRequestDataProvider.EncryptionPublicKey) throws -> TSCoreSDK.TSEncryptServerRequestDataProvider.DataContainer
}
public enum TSHttpMethod : Swift.String {
  case GET
  case POST
  case PUT
  case PATCH
  case DELETE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias Parameters = [Swift.String : Swift.String]
public protocol TSBaseNetworkRequest {
  var httpMethod: TSCoreSDK.TSHttpMethod { get }
  func urlHost() -> Swift.String?
  func httpBody() -> Foundation.Data?
  func headers() -> [Swift.String : Swift.String]?
  func queriesParameters() -> TSCoreSDK.Parameters?
  var keyDecodingStrategy: Foundation.JSONDecoder.KeyDecodingStrategy { get }
}
extension TSCoreSDK.TSBaseNetworkRequest {
  public var keyDecodingStrategy: Foundation.JSONDecoder.KeyDecodingStrategy {
    get
  }
}
public protocol TSDataSyncServer {
  associatedtype TYPE : Swift.Encodable
  associatedtype Response : Swift.Decodable
  func sendDataToServer(dataList: [Self.TYPE], moduleInfo: any TSCoreSDK.ITSModuleInfo, completion: @escaping ((Swift.Result<Self.Response, TSCoreSDK.TSRequestErrorCode>) -> Swift.Void)) throws
}
extension TSCoreSDK.KeychainSwiftAccessOptions : Swift.Equatable {}
extension TSCoreSDK.KeychainSwiftAccessOptions : Swift.Hashable {}
extension TSCoreSDK.TSLogLevel : Swift.Equatable {}
extension TSCoreSDK.TSLogLevel : Swift.Hashable {}
extension TSCoreSDK.TSLogLevel : Swift.RawRepresentable {}
extension TSCoreSDK.TSStorageErrorCode : Swift.Equatable {}
extension TSCoreSDK.TSStorageErrorCode : Swift.Hashable {}
extension TSCoreSDK.TSHttpMethod : Swift.Equatable {}
extension TSCoreSDK.TSHttpMethod : Swift.Hashable {}
extension TSCoreSDK.TSHttpMethod : Swift.RawRepresentable {}
